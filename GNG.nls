breed [GNG:nodes GNG:node]
undirected-link-breed [GNG:edges GNG:edge]

globals [node-count x-node] ;ew en alimit max-node-count lambda
; un valor normal de ew seria de 0.05
; un valor normal de en seria de 0.0006, aproximadamente 100 veces menos que ew
; max-nodes = 120, λ = 800, amax = 120, beta = 0.02, η = 0.05 alpha = 0.5

GNG:nodes-own [
  node-error  ; error local del nodo
  node-id     ; numero identificador del nodo
]

GNG:edges-own [
   edge-age ; edad de la arista
]

to GNG:setup
  ask patches [set pcolor white]
  clear-turtles
  reset-ticks
  resize-world 0 100 0 100
  set-patch-size 5
  set node-count 0
  
  set ew 0.05 
  set en 0.0006
  ;------ Creacion de la nube de puntos -------
  ; (Crear un metodo que haga esto para una lista de puntos en un csv
  repeat 50[ ask one-of patches with [pcolor = white and pxcor > 40 and pxcor < 60 and pycor > 40 and pycor < 60] [set pcolor black] ]
  ;-------- Creacion de la grid y los links introducidos mediante el csv -------------------
  repeat 2 [ GNG:crear-nodo (list (random max-pxcor) (random max-pycor)) ]
  create-turtles 1 [
    set xcor 0
    ;print xcor
    set ycor 0
    set color red
    set shape "circle"
    set size 2
    set label "x"
  ]
  set x-node turtles with [label = "x"]
  GNG:edge-to 0 1
  ; Utilizar el metodo /GNG:edge-to n1 n2/
end

to GNG:step
  ; Se establece el vector de entrada
  if (node-count - 1) >= max-node-count [ stop ]
  let nuevo-x one-of patches with[pcolor = black]
  ask x-node [
    set xcor [pxcor] of nuevo-x
    set ycor [pycor] of nuevo-x
  ]
  ; Se obtienen los nodos s y t mas cercanos al nodo 0
  let ws GNG:nearest
  let wt GNG:nearest-except ws
  ; Se actualiza el error del nodo s
  let newerror (GNG:distancia x-node GNG:nodes with [node-id = ws]) ^ 2
  ask GNG:nodes with [node-id = ws] [set node-error node-error + newerror]
  ; Se mueve s y los vecinos dependiendo de la distancia a x-node
  GNG:move-node ws
  ; Se actualiza la edad de los links de s
  ; Los links cuya edad supere alimit se borran
  ask GNG:nodes with [node-id = ws] [
    ; Si existe el link entre s y t, su edad se resetea
    ;print (word "me: " one-of GNG:nodes with [node-id = ws] " elem: " one-of GNG:nodes with [node-id = wt] " lista" [node-id] of GNG:edge-neighbors)
    ifelse member? wt [node-id] of GNG:edge-neighbors [
      ;show (word "arista " (GNG:edge ws wt))
      ask GNG:edge GNG:who ws GNG:who wt [set edge-age 0]
    ]
    ; Si no existe el link entre s y t se crea uno 
    [ GNG:edge-to ws wt ]
    
    ask my-GNG:edges [
      set edge-age edge-age + 1
      ; si la edad del link es mayor a alimit, este muere
      if edge-age >= alimit [
        die 
      ]
    ]
  ]
  ; Si algun nodo se ha quedado sin links, muere
  ask GNG:nodes with [count GNG:edge-neighbors = 0] [ die ]
  ; Si la iteracion actual es multiplo de lambda, se crea un nuevo nodo r
  ; Sea u el nodo con mayor error
  let nlist sort GNG:nodes
  let errors map [n -> [node-error] of n] nlist
  let u one-of GNG:nodes with [node-error = max errors]
  ; Sea v el vecino de u con mayor error
  ask u [ set nlist sort GNG:edge-neighbors ]
  set errors map [n -> [node-error] of n] nlist
  let v 0
  ask u [ set v one-of GNG:edge-neighbors with [node-error = max errors] ]
  ; Se crea r en el punto medio de u y v si no se ha alcanzado el limite de nodos
  if (ticks mod lambda = 0) and node-count < max-node-count [
    let posu GNG:check (list [xcor] of u [ycor] of u)
    let posv GNG:check (list [xcor] of v [ycor] of v)
    let newr (list round ((first posu + first posv) / 2) ;xcor
      round ((last posu + last posv) / 2)) ;ycor ; v + u / 2
    GNG:crear-nodo newr ; se crea el nodo r
    let r one-of GNG:nodes with [xcor = first newr and ycor = last newr]  ; almacenar en r el nodo r
    GNG:edge-to [node-id] of u [node-id] of r ; se crea link u r
    GNG:edge-to [node-id] of v [node-id] of r ; se crea link v r
    ask GNG:edge GNG:who [node-id] of u GNG:who [node-id] of v [ die ] ; se elimina link u v
    ; Se aplican nuevos errores para u, v y r
    ask u [ set node-error alpha * node-error]
    ask v [ set node-error alpha * node-error]
    ask r [ set node-error [node-error] of u]
    ; se decrementa el error de todos los nodos por un factor beta
    ask GNG:nodes [ set node-error node-error - beta * node-error]
  ]
  tick
end

to-report GNG:nearest ; Devuelve el id del nodo mas cercano a n1
  let nearest-id -1
  let nodos sort GNG:nodes
  let distancias map [n -> GNG:distancia x-node n] nodos
  let minima min distancias
  
  ;let n (item (position minima distancias) nodos)
  
  report [node-id] of (item (position minima distancias) nodos)
end

to-report GNG:nearest-except [n1] ; Devuelve el id del nodo mas cercano a /n1/ excluyendo los id de la lista /as/ (agentset)
  let nearest-id -1
  let nodos sort GNG:nodes with [not (node-id = n1)]
  let distancias map [n -> GNG:distancia x-node n] nodos
  let minima min distancias
  report [node-id] of (item (position minima distancias) nodos)
end

to GNG:move-node [id] ; Mover s y sus vecinos ; con ew y en entre 0 y 1
  let n GNG:nodes with [node-id = id] ; nodo con node-id = id
  let v1 (list [xcor] of x-node [ycor] of x-node) ; posicion de x-node
  let v2 (list [xcor] of n [ycor] of n) ; posicion de n
  let vdist GNG:vector-substract v1 v2 ; se obtiene la diferencia x - ws
  ask n [
    set xcor (xcor + (ew * first vdist))
    set ycor (ycor + (ew * last vdist))
    
    ask GNG:edge-neighbors [
      set v2 (list xcor ycor) ; posicion de vecinos de n
      set vdist GNG:vector-substract v1 v2 ; se obtiene la diferencia x - wn
      set xcor (xcor + (en * first vdist))
      set ycor (ycor + (en * last vdist))
    ]
  ]
end

to GNG:crear-nodo [vector] ; Crea un GNG:node especificando el vector de posicion y el color con ncolor
  let v GNG:check vector
  create-GNG:nodes 1 [
    set xcor round first v
    ;print xcor
    set ycor round last v
    set node-error 0.0
    set color green
    set shape "circle"
    set size 2
    set node-id node-count
    set label node-id
    set node-count node-count + 1
  ]
end

to GNG:edge-to [n1 n2]
  ask one-of GNG:nodes with [node-id = n1] [
    create-GNG:edge-with one-of GNG:nodes with [node-id = n2] [ 
      set edge-age 0 
    ]
  ]
  ;print (word "creando arista " n1 "-" n2 " = " GNG:edge GNG:who n1 GNG:who n2)
end

; Metodos matematicos 
to-report GNG:distancia [t1 t2] ;obtiene la distancia entre dos nodos
  let v1 (list (first [xcor] of t1) (first [ycor] of t1)) ;este corresponde a x-node
  let v2 (list ([xcor] of t2) ([ycor] of t2)) ;este es el nodo que se quiere medir
  
  report GNG:module2D GNG:vector-substract v1 v2
end

to-report GNG:module2D [vector] ; Calcula el modulo de un vector 2D
  let v GNG:check vector
  
  report sqrt ((first v) ^ 2 + (last v) ^ 2)
end

to-report GNG:vector-substract [vector1  vector2] ; Calculor de la diferencia: v1 - v2
  let v1 GNG:check vector1
  let v2 GNG:check vector2
  
  report (list ((first v1) - (first v2)) ((last v1) - (last v2)))
end

to-report GNG:check [vector] ; Checkea si un vector es bidimensional
  if length vector != 2 [print (word "Error in /GNG:check/ parameters: " vector)] ; Check vector is 2D vector
  report reduce sentence vector
end

to-report GNG:who [t]
  report ([who] of one-of GNG:nodes with [node-id = t])
end